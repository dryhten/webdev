/*
 * signup system based on the one I wrote in PHP for notes
 *
 * version 1
 * this is probably not the best implementation
 * this calls all the functions even if the previous ones failed
 * check version 2 for possibly a better version
 */

const connect = require("./connect.js");
const password = require("../password.js");
const validators = require("../validators.js");

function attempt_signup(signup_data, ee, args){
    /*
     * function that will attempt to sign up a user to a local db
     * (specified in connect.js) using login credentials from signup_data
     * when the function is done, an event "signup" will be emitted for ee
     *
     * the callback will be called like this: (ret, args)
     * where ret is an object with success/failure and some messages
     * and args are arguments passed to this function
     *
     * signup_data: {
     *   "username": ...,
     *   "email": ...,
     *   "password": ...
     * }
     *
     * ee: event emitter that listens for "signup"
     * callback prototype: (ret, args)
     *
     * args: optional args that will be passed to ee.on("signup")
     *
     * ret: {
     *   "success": ..., (true/false)
     *   "messages": [..., ...] (optional array of messages)
     *   "session": { (optional, in case of success)
     *     "uid": ..., (number, user id)
     *     "username": ..., (string)
     *     "email": ..., (string)
     *     "password": ..., (string)
     *   }
     * }
     */

    /* check input */
    let ret = check_errors(signup_data);
    if (ret["success"] === false){
	ee.emit("signup", ret, args);
	return;
    }

    /* connect to db */
    let connection = connect.connect_to_db(ee, "signup", args);

    /*
     * check if username exists
     * the next functions will be called after an event is fired
     * */
    check_username(signup_data, connection, ee, args);
}

function check_errors(signup_data){
    /*
     * check if username/password is empty and if email is valid
     * */
    let success = true;
    let messages = [];
    if (!signup_data["username"]){
	messages.push("Please enter a username");
	success = false;
    }
    if (!signup_data["password"]){
	messages.push("Please enter a password");
	success = false;
    }
    if (!signup_data["email"]){
	messages.push("Please enter an email");
	success = false;
    } else if (validators.validate_email(signup_data["email"]) === false){
	messages.push("Please enter a valid email address");
	success = false;
    }
    return {"success": success, "messages": messages};
}

function check_username(signup_data, connection, ee, args){
    /*
     * checks if username is already in the db
     */
    let query = "select count(*) as cnt from Users where username = " +
	connection.escape(signup_data["username"]);

    connection.query(query, function(err, rows, fields){
	if (err){
	    let ret = {
		success: false,
		messages: ["Error retrieving users: " + err.message],
	    }
	    ee.emit("signup", ret, args);
	    return;
	}
	let row_data = rows[0];
	if (row_data["cnt"] != 0){
	    let ret = {
		success: false,
		messages: ["Username already exists. Try a different one."],
	    }
	    ee.emit("signup", ret, args);
	    return;
	}
	signup(signup_data, connection, ee, args);
    });
}

function signup(signup_data, connection, ee, args){
    /*
     * inserts new user to db
     *
     * note
     * for the moment, user_data in hash_password() has the same
     * prototype as signup_data; this might change in the future
     * in which case this function needs to be updated
     */
    let hashed_password = password.hash_password(signup_data);
    let query = "insert into Users (username, email, password) values " +
	"(" + connection.escape(signup_data["username"]) +
	", " + connection.escape(signup_data["email"]) +
	", '" + hashed_password + "')";

    connection.query(query, function (err, results, fields) {
	if (err){
	    let ret = {
		success: false,
		messages: ["MySQL error: " + err.message],
	    }
	    ee.emit("signup", ret, args);
	    return;
	}
	/* log the user in and return success */
	let ret = {
	    "success": true,
	    "messages": ["success"],
	    "session": {
		"uid": results.insertId,
		"username": signup_data["username"],
		"email": signup_data["email"],
		"password": hashed_password,
	    },
	};
	connection.end();
	ee.emit("signup", ret, args);
    });
}

/* exports */
module.exports.attempt_signup = attempt_signup;
