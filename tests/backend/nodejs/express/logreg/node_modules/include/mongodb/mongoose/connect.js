/*
 * small module that connects to a MongoDB
 * credentials should be stored only in this place
 *
 * version 4 - using mongodb instead of mysql, with mongoose package
 * https://github.com/Automattic/mongoose
 * */
const credentials = {
    host: "localhost",
    port: "27017",
    user: "notes_user",
    password: "notes_password",
    db: "notes"
};

const mongoose = require("mongoose");

/* create mongoose scheme and model (only once) */
const user_schema = mongoose.Schema({
    username: String,
    email: String,
    password: String,
});
const user_model = mongoose.model("user", user_schema, "Users");


function connect_to_db(ee, event, args){
    /*
     * connects to mysql db using global var "credentials"
     * "credentials" and this function should be kept in same file
     *
     * ee: event emitter that listens for event
     * callback params: (ret, args)
     *
     * args: args to be passed to event callback
     *   too generic, I don't need this with v2+
     *
     * event: event to be emitted on ee when done
     *
     * ret {
     *   "success": boolean,
     *   "messages": [string, ...], (array of strings)
     *   "model": model used to communicate with db
     *   "connection": mongoose.connection obj needed to close it
     * }
     */
    let connect_str = "mongodb://" + credentials.user + ":" +
	credentials.password + "@" + credentials.host + ":" +
	credentials.port + "/" + credentials.db;

    /* connect */
    mongoose.connect(connect_str, {useMongoClient: true});
    /* change to global promises */
    mongoose.Promise = global.Promise;

    let db = mongoose.connection;
    db.on("error", function(err){
	let ret = {
	    success: false,
	    messages: ["Cannot connect to db: " + err.message],
	}
	ee.emit(event, ret, args);
    });
    db.once("open", function(){
	let ret = {
	    success: true,
	    messages: ["success"],
	    model: user_model,
	    connection: db,
	}
	ee.emit(event, ret, args);
    });
}

/* exports */
module.exports.connect_to_db = connect_to_db;
