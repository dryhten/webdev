/*
 * login system based on the one I wrote in PHP for notes
 *
 * version 2 - using events only
 */

/* events */
const EventEmitter = require("events");

/* require won't include twice the same module */
const connect = require("./connect.js");
const password = require("../password.js");

function attempt_login(login_data, ee, args){
    /*
     * function that will attempt to log in a user from a local db
     * (specified in connect.js) using login credentials from login_data
     * when the function is done, an event "login" will be emitted for ee
     *
     * the callback will be called like this: (ret, args)
     * where ret is an object with success/failure and some messages
     * and args are arguments passed to this function
     *
     * login_data: {
     *   "username": ...,
     *   "password": ...
     * }
     *
     * ee: event emitter that listens for "login"
     * callback prototype: (ret, args)
     *
     * args: optional args that will be passed to ee.on("login")
     *
     * ret: {
     *   "success": ..., (true/false)
     *   "messages": [..., ...] (optional array of messages)
     *   "session": { (optional, in case of success)
     *     "uid": ..., (number, user id)
     *     "username": ..., (string)
     *     "email": ..., (string)
     *     "password": ..., (string)
     *   }
     * }
     *
     * possible better way to implement this
     * use a list of functions, scope arguments and ret args
     * create a "done" event - when a function from the list
     * finishes, pop it, call the next one with the scope + ret args
     * if it fails, just call "login" on main event emitter;
     * if list is empty propagate/call "login"
     */

    /*
     * check input - no need to continue if this is bad
     * also, this function is not that time consuming so it's prob
     * better to run it now and not later, in the event loop
     * */
    let ret = check_errors(login_data);
    if (ret["success"] === false){
	ee.emit("login", ret, args);
	return;
    }

    let connection;
    const login_emitter = new EventEmitter();

    /*
     * connect to db
     * start the chain of async functions
     * */
    connect.connect_to_db(login_emitter, "connection");

    /* when connection is done */
    login_emitter.on("connection", function(ret){
	if (ret["success"] === false) {
	    ee.emit("login", ret, args);
	    return;
	}
	connection = ret["connection"];
	/* check credentials and log in */
	login(login_data, connection, login_emitter, "login");
    });

    /* when login is done */
    login_emitter.on("login", function(ret){
	/*
	 * since we need to close the connection anyway this will do
	 * however, a better idea would be to wrap connection.end()
	 * since it's also an async function, and emit "login"
	 * only when it's done
	 * */
	connection.end();
	ee.emit("login", ret, args);
    });
}

function check_errors(login_data){
    /*
     * check if username/password is empty
     * might be a good idea to check if !str works all the time
     * for empty strings with all the javascript type coercion
     * */
    let success = true;
    let messages = [];
    if (!login_data["username"]){
	messages.push("Please enter a username");
	success = false;
    }
    if (!login_data["password"]){
	messages.push("Please enter a password");
	success = false;
    }
    return {"success": success, "messages": messages};
}

function login(login_data, connection, ee, event){
    /*
     * login_data: {
     *   "username": ...,
     *   "password": ...
     * }
     *
     * connection: mysql.Connection object
     *
     * ee: event emitter that listens for event with params (ret, args)
     *
     * ret: {
     *   "success": ..., (true/false)
     *   "messages": [..., ...] (optional array of messages)
     *   "session": { (optional, in case of success)
     *     "uid": ..., (number, user id)
     *     "username": ..., (string)
     *     "email": ..., (string)
     *     "password": ..., (string)
     *   }
     * }
     */
    let query = "select * from Users where username = " +
	connection.escape(login_data["username"]);

    connection.query(query, function(err, rows, fields){
	if (err){
	    let ret = {
		success: false,
		messages: ["Error retrieving user: " + err.message],
	    }
	    ee.emit(event, ret);
	    return;
	}
	if (rows.length < 1){
	    let ret = {
		success: false,
		messages: ["Bad login details"],
	    }
	    ee.emit(event, ret);
	    return;
	}
	/*
	 * same assumptions as login_base.php - if we have multiple rows
	 * as result, just look at the first one; this might result in errors
	 * if we allow multiple users with the same name - but this is not true
	 * the username is the unique identifier for a user so no duplicates
	 */
	let row_data = rows[0];

	// check password
	let user_data = {
	    "username": login_data["username"],
	    "email": row_data["email"],
	    "password": login_data["password"],
	};
	if (row_data["password"] != password.hash_password(user_data)){
	    let ret = {
		success: false,
		messages: ["Bad login details"],
	    }
	    ee.emit(event, ret);
	    return;
	}

	// save info in session variables
	let ret = {
	    "success": true,
	    "messages": ["success"],
	    "session": {
		"uid": row_data["id"],
		"username": row_data["username"],
		"email": row_data["email"],
		"password": row_data["password"],
	    },
	};
	ee.emit(event, ret);
    });
}

/* exports */
module.exports.attempt_login = attempt_login;
